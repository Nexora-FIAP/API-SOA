name: CI/CD Security Pipeline

permissions:
  security-events: write
  contents: read

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  # ================================
  # 1. SAST - Semgrep
  # ================================
  sast:
    name: SAST - Semgrep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Semgrep
        run: pip install semgrep
      - name: Run Semgrep
        run: semgrep --config p/ci --sarif --output semgrep.sarif
      - name: Upload SAST Report
        uses: actions/upload-artifact@v4
        with:
          name: sast-report
          path: semgrep.sarif
      - name: Upload to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  # ================================
  # 2. SCA - Snyk
  # ================================
  sca:
    name: SCA - Snyk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Grant execute permission for mvnw
        run: chmod +x ./mvnw

      - name: Ensure we're in the project root
        run: pwd # opcional, apenas para debug
        # geralmente n√£o precisa de cd se o pom.xml est√° na raiz ap√≥s checkout

      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
        with:
          version: "latest"

      - name: Run Snyk test
        run: snyk test --json > snyk-report.json || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload SCA Report
        uses: actions/upload-artifact@v4
        with:
          name: sca-report
          path: snyk-report.json

  # ================================
  # 3. DAST - OWASP ZAP
  # ================================
  dast:
    name: DAST - OWASP ZAP
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Build aplica√ß√£o
        run: mvn clean package -DskipTests

      - name: Start aplica√ß√£o em background
        run: |
          nohup java -jar target/*.jar --spring.profiles.active=test --server.port=8080 > app.log 2>&1 &
          for i in {1..12}; do
            nc -z localhost 8080 && break
            echo "Waiting for application..."
            sleep 5
          done

      - name: Install ZAP 2.16.1
        run: |
          wget https://github.com/zaproxy/zaproxy/releases/download/v2.16.1/ZAP_2.16.1_Linux.tar.gz
          tar -xzf ZAP_2.16.1_Linux.tar.gz
          chmod +x ZAP_2.16.1/zap.sh

      # ‚úÖ Etapa nova ‚Äî cria√ß√£o de diret√≥rio com permiss√£o total
      - name: Create writable report directory
        run: mkdir -p ZAP_2.16.1/zap-reports && chmod -R 777 ZAP_2.16.1/zap-reports

      # ‚úÖ (Opcional, mas recomendado) Atualizar add-ons antes da varredura
      - name: Update ZAP add-ons
        run: ./ZAP_2.16.1/zap.sh -cmd -addonupdate

      - name: Run ZAP Baseline Scan
        run: |
          ./ZAP_2.16.1/zap.sh -cmd -quickurl http://localhost:8080 -quickout ZAP_2.16.1/zap-reports/zap-report.html

      - name: Upload DAST Report
        uses: actions/upload-artifact@v4
        with:
          name: dast-report
          path: ZAP_2.16.1/zap-reports

  # ================================
  # 4. Integra√ß√£o & Monitoramento
  # ================================
  integration:
    name: Integration & Monitoring
    runs-on: ubuntu-latest
    needs: [sast, sca, dast]
    steps:
      - name: Download SAST report
        uses: actions/download-artifact@v4
        with:
          name: sast-report
          path: reports/sast
      - name: Download SCA report
        uses: actions/download-artifact@v4
        with:
          name: sca-report
          path: reports/sca
      - name: Download DAST report
        uses: actions/download-artifact@v4
        with:
          name: dast-report
          path: reports/dast
      - name: Check for critical vulnerabilities
        run: |
          echo "üîé Verificando vulnerabilidades cr√≠ticas..."
          if grep -i "CRITICAL" reports/*/*; then
            echo "‚ùå Vulnerabilidades cr√≠ticas encontradas. Bloqueando deploy."
            exit 1
